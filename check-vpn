#!/bin/bash
# 

vpnservername='guvpn.georgetown.edu'
reset=''
stop=''

# Define Function
## Help
show_help(){
cat <<EOF

Usage ${0##*/} [-h|--help] [-server SERVERNAME] [--reset] [--stop]

Initiate an openconnect instance to perform passwordless login into a VPN server. Open connect will
attempt automatic reconnection if the connection is dropped at any point.

This program will install openconnect and its dependencies if they do not exist. The TUNTAP utility
is required for functionality on OS X. Please see installation instructions for adding openconnect
to the sudoers list to avoid connection hangups due to pending password prompts.

Compatibly with macOS only.

EOF
}
# Parse Options 
## Shift through standard input and assign to variables using option flags
while :; do
    case ${1} in
        -h|--help)
        show_help
        exit
        	;;
        --reset)
        	reset='reset'
        	;;
        --stop)
        	stop='stop'
        	;;
        -server)
			if [ -n "${2}" ]; then
                vpnservername=${2}
                shift
            else
                echo "ERROR -server requires a non-empty option argument" >&2
                exit
            fi
            ;;
        -?*)
            printf '\n ‚ÄºÔ∏è Warning: Unknown option: %s\n' "${1}" >&2
            exit
            ;;
        *)
            break
    esac
    shift
done
# Define Function
## Securely store VPN password
# Path to log in information
function checkvpn_password(){
	local logindir="${HOME}/.ssh/.autovpn"
	# Create login directory and set appropriate permissions
	[ ! -d ${logindir} ] && echo -e "\n\n üõ† Setting up Environment for Automatic VPN Logins..\n" && mkdir -m 700 $logindir && sudo chown $(whoami) $logindir
	# Create Password file if it doesn't exist
	if [ ! -e "$logindir/.connect.$vpnservername" ]; then
		read -p " üë§ VPN Login Required! Please enter your username:   " user && read -sp "  ** Please enter your password:  üîë  " password && sudo echo ${user}:${password} | sudo openssl enc -aes-256-cbc -k $(hostname) > "$logindir/.connect.$vpnservername"	
	else
		echo -e " \n  -------------------------------------------\n   üîì  Decrypting Credentials for Auto Login\n  -------------------------------------------\n"
		user=$(sudo cat "${logindir}/.connect.$vpnservername" | openssl enc -aes-256-cbc -k $(hostname) -d | cut -f1 -d:) && password=$(sudo cat "$logindir/.connect.$vpnservername" | openssl enc -aes-256-cbc -k $(hostname) -d | cut -f2- -d:)		
	fi	
}



# Define function
## Install Open Connect
function checkvpn_install(){
	if [ ! $(uname) = "Darwin" ]; then
		echo -e "\nÔ∏è‚ùóÔ∏è  Support is limited to macOS Darwin at this time.. quitting\n"
		exit 0
	fi
	if [ -z $(which brew) ]; then
		ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi
	# Install Open Connect With HomeBrew
	brew install openconnect
	# Download & Install TunTap
	wget https://downloads.sourceforge.net/project/tuntaposx/tuntap/20150118/tuntap_20150118.tar.gz?r=http%3A%2F%2Ftuntaposx.sourceforge.net%2Fdownload.xhtml&ts=1493327671&use_mirror=cytranet
	mkdir ${HOME}/tuntap && tar -xzvf tuntap_20150118.tar.gz -C ${HOME}/tuntap && echo -e " ** Please install the TUNTAP Driver in the pop up window " && open ${HOME}/tuntap/tuntap_20150118.pkg && rm tuntap_20150118.tar.gz
	cat <<EOF

‚öô INSTALLATION CAVEATS - openconnect requires manual intervention to finish the installation

 ‚ùóÔ∏è Running openconnect requires sudo because it can affect DNS resolution. You must add this program
    to the sudoers list to avoid typing your password in each time you want to connect.

 		* To enable passwordless reconnection, type the following into your terminal:

 			>> sudo visudo -f /etc/sudoers

 		* A text editor will appear and you must scroll with the down arrow until you see the following

 			## 
 			## User privilege specification
 			## 
 			root ALL=(ALL) ALL
 			%admin ALL=(ALL) ALL

 		* Copy/Paste the following line right under the last line in the section above

 		 	%admin  ALL=(ALL) NOPASSWD: /usr/local/bin/openconnect

 ‚ùóÔ∏è When connecting to SSL VPN, openconnect may complain about a "self-signed certificate" being in
 	the chain and force you to explicitly accept it everytime. The self-signed cert is actually the
 	root certificate and (hopefully) is one with implicit trust (i.e. trusted by browsers), so we can
 	safely trust it by specifying the CA file after exporting it from macOS Keychain. 

 		To do this follow these steps on OS X ::

 			* Open the Keychain Access App (use command + space bar to search spotlight for the app)

 			* Click on certificates on the bottom left corner and search for the 'Apple Root CA' entry.

 			* Right click the 'Apple Root CA' entry and export it as a apple_root_ca.pem file into your ~/.ssh folder.

 		More information about Apple Certificates :: https://support.apple.com/en-us/HT205204

EOF
}
# Define Function
## reset all account information
function checkvpn_reset(){
	echo -e "\n\n Reseting Environment for Automatic VPN Logins"
	sudo rm -r "${HOME}/.ssh/.autovpn"
}
# Define Function 
## Connect 
function checkvpn_connect(){
	echo -e "\n   üì°  Seeking Initial Connection to ${vpnservername}\n\n"
	local root_certificate=${HOME}/.ssh/apple_root_ca.pem
	[ ! -e ${root_certificate} ] && read -p "ERROR, cannot find root certificate: ${root_certificate}. Please enter path to root certificate file." root_certificate && [ ! -e $root_certificate ] && echo -e "Root Certificate Not Found: Exiting.. refer to https://gist.github.com/moklett/3170636 for more info" && exit 1
	echo ${password} | sudo openconnect --user=$user --usergroup='Default' --cafile=${root_certificate} --reconnect-timeout 1 --passwd-on-stdin ${vpnservername} > "${HOME}/.ssh/.autovpn/connect.$vpnservername.log" 2>&1 &
	echo -e '   üìª  Connection Established  \n\n'
}
# Define Function
## Stop Connection
function checkvpn_stop(){
	sudo pkill openconnect 
}

#while [ 1 ] ; do ping -c 2 10.11.12.13 ; sleep 60 ; done

# Run check-vpn pipeline
## kill process if stop signal
[ ! -z $stop ] && checkvpn_stop
## delete all locally stored meta data
[ ! -z $reset ] && checkvpn_reset
## check if openconnect is installed
[ -z $(which openconnect) ] && checkvpn_install
## check password and connect if no stop signal
[ -z $stop ] && checkvpn_password && checkvpn_connect

#####################################
### Shady El Damaty ; 27 April 2017
###
### checkvpn / check-vpn
#####################################