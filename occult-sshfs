#!/bin/bash
# Maintain Mounted Volume on SSHFS
##
# user login & server
user=''
host=''
# server mount info
hostalias=''
mount_this=''
mount_here='/Volumes'
# vpn
vpnservername=''
##
# Define Function
## Help 
function show_help(){

cat <<-EOF

Usage: ${0##*/}  -  A wrapper for the Secure Shell File System (sshfs) protocol for maintaining a zombie connection that ressurects upon disconnect.

	Caveats & Info :: 

		* This program relies on an active ssh-agent running via keychain to maintain passwordless logins. The user will be taken through the ssk key 
		  installation if ssh-agent is not detected with an active private key (usually ~/.ssh/id_rsa or id_dsa).

		* You can connect to servers hidden behind a firewall if you have VPN credentials for the protected network. A persistent VPN connection will be
		  setup and established if the user species the --vpn option.  Type `vpn-connect help` for more information.

		* Persistent Zombie connections cannot occur if you do not have write access to the remote file system. This program creates a file on the remote
		  file system that signals when the connection is dropped. If the file can't be created then persistence can't be maintained.

		* ${0##*/} will link the desired remote file system into the home directory prior to sshfs-ing into the user's home directory on the remote host.
		  The home directory is preferred to maintain consistency in filepaths. Also keeps things clean.

		* Zombie signals and log files can be found under ~/.ssh/.autosshfs/*.log. Delete the appropriate zombie file in this directory if banish doesn't
		  succesfully disconnect the remote file system.

     Options :: 
                [help]		          print usage 

                [-u|--uname USER]         user name for remote host
                [-h|--host HOST]          host address / host name
                [-p|--serverdir PATH]     directory to be accessed on the remote host
	       		[-l|--localdir PATH]      the remote directory will be placed here
                [-a|--hostalias STRING]   name for the local portal to the remote directory
                [-v|--vpn SERVERNAME]     enter this option to tunnel via VPN (address required)

     Example ::

      	Basic usage, program will prompt user for basic inputs

      			${0##*/}

      	Basic usage, enter inputs at prompt but also use vpn

      			${0##*/} --vpn

      	Manually Specify All Options and connect to a server through a vpn tunnel
               
        	    ${0##*/} -u guest -h 192.168.1.11 -p / -l /Volumes/ -a awesomeserver -v securvpn.connected.org

      	Banish (Stop) Zombie Connection (this will clean up all symlinks & umount the folder)

      			${0##*/} -u guest -h 192.168.1.11 -p / -l /Volumes/ -a awesomeserver -v securvpn.connected.org banish

      		OR enter inputs at prompt (assuming VPN connection)

      			${0##*/} --vpn banish


EOF
} 
##
while :; do
	case ${1} in
		'help')
		show_help
		exit
		;;
		-v|--vpn)
		vpn='usevpn'
			if [ -n "${2}" ]; then
				vpnservername=${2}
				shift
			fi		
		;;
		banish)
		banish='banishzombie'
		;;				
		-u|--uname)
			if [ -n "${2}" ]; then
				user=${2}
				shift
			else
				echo -e "ERROR:  -u --uname requires a non-empty option argument.\n" >&2
				exit
			fi
		;;	
		-h|--host)
			if [ -n "${2}" ]; then
				host=${2}
				shift
			else
				echo -e "ERROR:  -h --host requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-p|--serverdir)
			if [ -n "${2}" ]; then
				mount_this=${2}
				shift
			else
				echo -e "ERROR:  -p --serverdir requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-a|--hostalias)
			if [ -n "${2}" ]; then
				hostalias=${2}
				shift
			else
				echo -e "ERROR:  -a --hostalias requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-l|--localdir)
			if [ -n "${2}" ]; then
				mount_here=${2}
				shift
			else
				echo -e "ERROR:  -a --hostalias requires a non-empty option argument.\n" >&2
				exit
			fi
		;;									
        -?*)
            printf '\n ‼  ️ Warning: Unknown option: %s\n' "${1}" >&2
            exit
            ;;
        *)
            break
	esac
	shift
done
cat <<EOF
---------------------------------------------------------------------------------------------------------------------
				⛓ ⚗  Occult Secure Shell File System (SSHFS) Ritual 🏺 ⛓

EOF
# Check for input arguments
[ -z ${host} ] && echo -e "\nPlease Enter Host Address ::  " && read -p "▶️  " host
[ -z ${user} ] && echo -e "\nPlease Enter Username @ ${host} ::  " && read -p "▶️  " user
[ -z ${hostalias} ] && echo -e "\nEnter Alias for Remote File System (i.e. something descriptive for what you're mounting) ::  " && read -p "▶️  " hostalias
[ -z ${mount_this} ] && echo -e "\nEnter Remote File System Path You Would Like to Mount as ${hostalias} ::  " && read -p "▶️  " mount_this
[ ! -z ${vpn} ] && [ -z ${vpnservername} ] && echo -e "\nEnter VPN address to tunnel through (leave empty for no VPN tunneling) ::  " && read -p "▶️  " vpnservername
##
# Define Function
## Check that sshfs is installed
function occultsshfs_dependencies(){
	if [ -z $(which sshfs) ]; then
		echo -e "\n Installing SSHFS "
        if [ $(uname) = 'Darwin' ]; then
            if [ -z $(which brew) ]; then
                ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
            brew cask install osxfuse
			brew install sshfs
        elif [ $(uname) = 'Linux' ]; then
        	yum install fuse-sshfs
        	[ -z $(which sshfs) ] && echo "Sorry - Linux not currently supported, see your system admin" && exit
        else
        	echo 'Sorry this OS is not supported'
        	exit
        fi		
	fi
}
# Define Function
## Assemble input arguments to final formats
function occultsshfs_buildcoffin(){
	mount_here=${mount_here}/${hostalias}
	echo -e "\n⚰    Setting up Local Coffin for Zombie: $mount_here\n" && [ ! -d ${mount_here} ] && mkdir -p ${mount_here}
	[ ! -e "${HOME}/.ssh/.autosshfs" ] && mkdir -p ${HOME}/.ssh/.autosshfs
}
# Define Function
## Establish Persistent VPN Connection via OpenConnect
function occultsshfs_checkvpn(){
	[ ${vpn} ] && vpn-connect
	i=1
	sp="/-\|"
	echo -n ' ' 
	while [ -z "$(echo $(ps aux | grep "[g]uvpn.georgetown.edu"))"]; do
		printf "\b${sp:i++%${#sp}:1} Connecting to VPN...\r"
	done
}
# Define Function
## Check Existence of SSH Keys, ssh-agent & keychain
function occultsshfs_checksshkeys(){
	# get location of current key
	local currentkey=$(ssh-add -L | awk '{print $3}')
	if [ -e $currentkey ]; then
		echo -e "🔎 🔑  Found Existing SSH Key ($currentkey)\n"
	else
		if [ -z $(type start_keychain) ]; then
			echo -e "\n ❗️❗️  No Active Encryption Key Detected! Would you like to generate ssh keys for password-less login?\n [Y/N]"
			read proceed
			if [ "{$proceed" = 'Y' ] || [ "{$proceed" = 'y' ]; then
				echo -e " **  Creating Public/Private RSA Key Pairs with 4096 Bit Length, Secure Passphrase & SSH-Agent Management via Keychain\n\n" 
				setup-sshkeys -uname $user -host $host --rsa -bits 4096 --x11 --keychain
			else
				echo -e "\nssh keys are required for automatic mounting of remote filesystems.. proceeding with mortal file system"
				nokeys='nokeys'
			fi
		else
			start_keychain
			read -p "**  Enter Path to Private Key to Enable Automatic Logins (~/.ssh/id_rsa)" private_key
			if [ -z ${private_key} ]; then
				local private_key="~/.ssh/id_rsa"
			else
				[ ! -e ${private_key} ] && echo -e "\n ❗️❗️  WARNING - ${private_key} not found, sshfs will require password entry for each reconnection.. exiting....\n" && exit
				[ -e ${private_key} ] && echo "\n\n ** Adding Existing Key to Keychain\n" && ssh-add ${private_key}
			fi
		fi
	fi
}
# Define Function
## Check For Existing Host Alias & Fix Naming Conflicts If Found
### ** User can specify a host alias that is identical to an existing alias.. either this alias already exists
###	   (i.e. same origin) OR the user has specified an identical alias name but points to a different origin
### ** This function avoids multiple aliases in the home directory that all point to the same place.. however a user
###    can specify an alias with an existing name that points to a different place
function occultsshfs_checkalias(){
	# Find all symbolic links in homedirectory
	local linklist=$(ssh ${user}@${host} 'ls -d `find '${1}' -maxdepth 1 -type l -print`')
	# Only check links if there are any!
	if [ "${linklist}" ]; then
		# Loop through all symbolic links and identify link origin 
		for link in ${linklist}; do 
			# Retrieve Alias Origin
			identity=$(ssh ${user}@${host} 'echo $(readlink -f '${link}')')			
			# Modify Alias Name IF & ONLY IF Desired File Systems Are Different But Aliases The Same
			if [ "${identity}" != "${mount_this}" ] && [ "${hostalias}" = "$(basename ${link})" ]; then
				keeplooping='startheloop'
				# If The Alias Origin Doesn't Match then Append Incremented Number to Alias Name (to distinguish)
				local counter=0
				# Keep looping until you can find a newhostalias that doesn't exist on the remote server
				while [ $keeplooping ]; do
					local newhostalias=$(printf "${hostalias}_%03d" $counter)
					identity=$(ssh ${user}@${host} 'echo $(readlink -f '${1}/${newhostalias}')')
					[ "$(dirname $mount_this)/$(basename ${mount_this})" != "$(dirname $identity)/$(basename ${identity})" ] && keeplooping=$(ssh ${user}@${host} '[ -h '$newhostalias' ] && echo keeplooping!')
					[ "$(dirname $mount_this)/$(basename ${mount_this})" = "$(dirname $identity)/$(basename ${identity})" ] && keeplooping=''
					let counter=counter+1
				done
				# Notify User
				#echo -e "\n\t\t\t\t⚠️  Host Alias ${hostalias} already exists on ${host}."
				#echo -e "\n\t * * Unique identifier ${newhostalias} has been appended to distinguish distinct file systems\n"
				# Otherwise leaves things alone if the desired filesystems match between user and alias origin							
			elif [ "${identity}" = "${mount_this}" ]; then
				echo -e "\n✅    Link to FileSystem Already Exists on ${user}@${host}:${link} <--> ${identity}"
				hostalias=$(basename ${link})
				break
			fi
		done
		[ ! -z ${newhostalias} ] && hostalias=${newhostalias}
	fi
}
# Define Function
## Remove Zombification Signal & Anchor 
function occultsshfs_banish(){
	echo -e "\n👹💭  Banishing SSHFS Zombie - Unmounting Remote File System, Deleting Zombie Signal  \n"
	echo -e "\t\t   ${user}@${host}:${mount_this} <-- 💥  --> $(hostname):${mount_here}/${hostalias}"
	ssh ${user}@${host} "[ -e ${mount_this}/$(whoami).$(hostname).bindzombie ] && unlink ${mount_this}/$(whoami).$(hostname).bindzombie"	
	# Get Correct Alias
	occultsshfs_checkalias $(ssh ${user}@${host} 'echo ${HOME}')
	if [ -e ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie ]; then
		rm ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie
	fi
	if [ -d $mount_here/${hostalias} ]; then
		[ -h $mount_here/$(whoami).$(hostname).bindzombie ] && unlink -v $mount_here/$(whoami).$(hostname).bindzombie
		umount -f ${mount_here}/${hostalias} > /dev/null
		## Add something here to check if umount failed (be very careful)
		sleep 1
		[ -d ${mount_here}/${hostalias} ] && rm -rv ${mount_here}/${hostalias}
	fi
	echo -e "\n✅ Zombie Signal Has Been Killed"
	echo "---------------------------------------------------------------------------------------------------------------------"
	exit	
}
# Define function
## Check permissions of remote file system and set up aliases if needed 
function occultsshfs_checkperms(){
notwritable=$(ssh ${user}@${host} "[ ! -w ${mount_this} ] && echo 'notwritable'")
if [ ! -z ${notwritable} ]; then
	echo -e '🔐 Remote FileSystem Is Not Writable -- zombie signal cant be written to ${mount_this}\n'
	echo -e "\t 📢  The resident necromancer recommends you mount a writable directory (i.e. your home dir) and use aliases to point to non-writable directory if you would like to maintain a persistent connection."
	read -p "▶️  Would you like to mount your remote home directory and use aliases instead? [Y|N]" useraction
	[ "${useraction}" = "Y" ] || [ "${useraction}" = "y" ] && mount_this="${HOSTHOME}" && notwritable=''
fi
}
# Define Function
## Anchor Desired FileSystem to Home Directory on Remote Host
function occultsshfs_occultritual(){
	# Build a Coffin for the Zombie (create directory for mounting & binding)
	occultsshfs_buildcoffin
	# Establish VPN connection if required
	occultsshfs_checkvpn
	# Check for SSH keys
	occultsshfs_checksshkeys
	# Check For Naming Conflicts (Don't Overwrite Links!)
	occultsshfs_checkalias ${1}
	# Create Binding in Remote Home Directory
	if [ -z ${notwritable} ]; then
		echo -e "\n⛓    Binding Remote File System to Local Host  ⛓\n"
		local binding="${1}/.ssh/.autosshfs/$(whoami).$(hostname).${hostalias}.bindzombie"
		ssh ${user}@${host} "mkdir -p ${1}/.ssh/.autosshfs; [ ! -e ${binding} ] && touch ${binding}"
		# whats the point of this??
		local secondbinding="${mount_this}/$(whoami).$(hostname).bindzombie"
		ssh ${user}@${host} "[ ! -e ${mount_this}/$(whoami).$(hostname).bindzombie ] && ln -sv ${binding} ${secondbinding}"
	fi		
	# Link Remote FileSystem to Remote Home Directory with Anchor Once Host Alias Checks Out
	echo -e "\n↔️    Soft-Linking File Systems on ${user}@${host} :: ${mount_this} <- - - -> ${1}/${hostalias}\n"
	ssh ${user}@${host} "[ ! -e ${1}/${hostalias} ] && ln -s ${mount_this} ${1}/${hostalias}"
}
# Define Function 
## Loop indefinitely while Zombie Signal Exists & Check for Anchor
function occultsshfs_raisezombie(){
	[ -z ${notwritable} ] && [ ! ${nokeys} ] && echo "🙌 Behold! Raising Zombie SSHFS Connection ::" && echo "	${user}@${host}:${mount_this} <--👻 📡 --> $(hostname):${mount_here}/${hostalias}"
	# Place the zombification signal in the home directory 
	if [ ${notwritable} ] || [ ${nokeys} ]; then
		echo -e "...establishing mortal filesystem connection because binding file cannot be written to ${user}@${host}:${mount_this}"
		echo "	${user}@${host}:${mount_this} <--🗣 📡 --> $(hostname):${mount_here}/${hostalias}"
		sshfs ${user}@${host}:${HOSTHOME}/${hostalias}/ $mount_here -C -o Ciphers=arcfour,cache=yes,kernel_cache,defer_permissions,reconnect,follow_symlinks	
	else
		touch ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie
		# Zombie will stay alive as long as the zombification signal file exists on local machine
		while [ -e "${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie" ]; do
			if [ ! -e $mount_here/$(whoami).$(hostname).bindzombie ]; then
				echo -e "\n---------------------------------------------------------------------------------------------------------------------\n ⚰👻  Zombie Binding Spell Returns Null Value * * Resurrecting SSHFS Connection * *  $(date)\n"
				sshfs ${user}@${host}:${HOSTHOME}/${hostalias}/ $mount_here -C -o Ciphers=arcfour,cache=yes,kernel_cache,defer_permissions,reconnect,follow_symlinks	
				[ -e $mount_here/$(whoami).$(hostname).bindzombie ] && echo "   ✅  Succesfully Raised Zombie In ${mount_here}"
			fi
		done
	fi
}
# Define Function
## Assemble current sequence of functions and execute spell
function occultsshfs_castspell(){
	# Check that sshfs is installed
	occultsshfs_dependencies
	# Banish Zombie & BindingSpell 
	[ ${banish} ] && occultsshfs_banish
	# Get Path to Home Directory for Remote User
	HOSTHOME=$(ssh ${user}@${host} 'echo ${HOME}')	
	# First Check If Remote FileSystem is Writable
	occultsshfs_checkperms
	# Perform an Occult Ritual To Bind Zombie
	occultsshfs_occultritual ${HOSTHOME}
	# Now Raise Zombie
	occultsshfs_raisezombie ${HOSTHOME} > ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie.log 2>&1 & 
	open ${mount_here}
}

# Execute top level function 
occultsshfs_castspell
echo ''
echo "Running Zombie in Background - you can check status at ~/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie.log"
echo '---------------------------------------------------------------------------------------------------------------------'
#####################################
### Shady El Damaty ; 3 May 2017
###
### occult-sshfs / occultsshfs
#####################################