#!/bin/bash
# Maintain Mounted Volume on SSHFS
##
# user login & server
user=''
host=''
# server mount info
hostalias=''
mount_this=''
mount_here='/Volumes'
# vpn
vpnservername=''
# moreinfo
moreinfo=''
##
# Define Function
## Help 
function show_help(){

helptxt=$(cat <<-EOF

Usage: ${0##*/}  [-u|--uname USER] [-h|--host HOST] [-p|--serverdir PATH] [-l|--localdir PATH] [-a|--hostalias NAME] [-v|--vpn HOST2]

A wrapper for the Secure Shell File System (sshfs) protocol for maintaining a zombie connection that ressurects upon disconnect.

üö© Options :: 

\t[help]			  print this message 
\t[moreinfo]		  prints more information

\t[-u|--uname USER]         user name for remote host
\t[-h|--host HOST]          host address / host name
\t[-p|--serverdir PATH]     directory to be accessed on the remote host
\t[-l|--localdir PATH]      the remote directory will be placed here
\t[-a|--hostalias STRING]   name for the local portal to the remote directory
\t[-v|--vpn SERVERNAME]     enter this option to tunnel via VPN (address required; macOS only)

üö© Examples ::

\tBasic usage, program will prompt user for basic inputs, server fs will be mounted in /Volumes

\t\t${0##*/}

\tBasic usage, enter inputs at prompt but also use vpn

\t\t${0##*/} --vpn

\tManually Specify All Options and connect to a server through a vpn tunnel
       
\t\t${0##*/} -u guest -h 192.168.1.11 -p / -l /Volumes/ -a awesomeserver -v securvpn.connected.org

\tBanish (Stop) Zombie Connection (this will clean up all symlinks & umount the folder)

\t\t${0##*/} -u guest -h 192.168.1.11 -p / -l /Volumes/ -a awesomeserver -v securvpn.connected.org banish

\t...OR enter inputs at prompt (assuming VPN connection)

\t\t${0##*/} --vpn banish
\n
EOF
)
moreinfotxt=$(cat <<EOF

üö© Caveats & Info :: 

* SSH Agent is required:
  This program relies on an active ssh-agent running via keychain to maintain passwordless logins. The user will be taken through the ssk key installation if ssh-agent is not detected with an active private key (usually ~/.ssh/id_rsa or id_dsa).

* Compatible with VPN:
  You can connect to servers hidden behind a firewall if you have VPN credentials for the protected network. A persistent VPN connection will be setup and established if the user species the --vpn option.  Type 'vpn-connect help' for more information.

* Mounts Home Directory on Remote Server by Default:
  ${0##*/} will link the desired remote file system into the home directory prior to sshfs-ing into the user's home directory on the remote host. The home directory is preferred to maintain consistency in filepaths and avoid permissions issues. Also keeps things clean.

* Log Files:
  Zombie signals and log files can be found under ~/.ssh/.autosshfs/*.log. Delete the appropriate zombie file in this directory if banish doesn't succesfully disconnect the remote file system.

* Default Settings:
  SSHFS is executed with the following optimized settings: -o Ciphers=arcfour,cache=yes,kernel_cache,defer_permissions,reconnect,follow_symlinks	

* Web Resources:
  https://en.wikipedia.org/wiki/Filesystem_in_Userspace
  https://en.wikipedia.org/wiki/SSHFS
  http://www.funtoo.org/Keychain
  http://www.infradead.org/openconnect/
\n 
EOF
)

[ -z "${moreinfo}" ] && echo -e "${helptxt}" && exit
[ ! -z "${moreinfo}" ] && echo -e "${helptxt}${moreinfotxt}" && exit
} 
##
while :; do
	case ${1} in
		'help')
			shift
			show_help
		;;
		'moreinfo')
			moreinfo='showmore'
			shift
			show_help
		;;		
		-v|--vpn)
			vpn='usevpn'
			if [ -n "${2}" ]; then
				vpnservername=${2}
				shift
			fi		
		;;
		banish)
			banish='banishzombie'
		;;
		uninstall)
			uninstall='uninstall'
		;;						
		-u|--uname)
			if [ -n "${2}" ]; then
				user=${2}
				shift
			else
				echo -e "ERROR:  -u --uname requires a non-empty option argument.\n" >&2
				exit
			fi
		;;	
		-h|--host)
			if [ -n "${2}" ]; then
				host=${2}
				shift
			else
				echo -e "ERROR:  -h --host requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-p|--serverdir)
			if [ -n "${2}" ]; then
				mount_this=${2}
				shift
			else
				echo -e "ERROR:  -p --serverdir requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-a|--hostalias)
			if [ -n "${2}" ]; then
				hostalias=${2}
				shift
			else
				echo -e "ERROR:  -a --hostalias requires a non-empty option argument.\n" >&2
				exit
			fi
		;;
		-l|--localdir)
			if [ -n "${2}" ]; then
				mount_here=${2}
				shift
			else
				echo -e "ERROR:  -a --hostalias requires a non-empty option argument.\n" >&2
				exit
			fi
		;;									
        -?*)
            printf '\n ‚Äº  Ô∏è Warning: Unknown option: %s\n' "${1}" >&2
            exit
        ;;
        *)
            break
	esac
	shift
done
cat <<EOF
---------------------------------------------------------------------------------------------------------------------
				‚õì ‚öó  Occult Secure Shell File System (SSHFS) Ritual üè∫ ‚õì

EOF
# Check for input arguments
[ -z ${host} ] && echo -e "\nPlease Enter Host Address ::  " && read -p "‚ñ∂Ô∏è  " host
[ -z ${user} ] && echo -e "\nPlease Enter Username @ ${host} ::  " && read -p "‚ñ∂Ô∏è  " user
[ -z ${hostalias} ] && echo -e "\nEnter Alias for Remote File System (i.e. something descriptive for what you're mounting) ::  " && read -p "‚ñ∂Ô∏è  " hostalias
[ -z ${mount_this} ] && echo -e "\nEnter Remote File System Path You Would Like to Mount as ${hostalias} ::  " && read -p "‚ñ∂Ô∏è  " mount_this
#[ -z ${mount_here} ] && echo -e "\nWhere would you like to place ${mount_this}? (enter path to folder on local machine) ::  " && read -p "‚ñ∂Ô∏è  " mount_here
[ ! -z ${vpn} ] && [ -z ${vpnservername} ] && echo -e "\nEnter VPN address to tunnel through ::  " && read -p "‚ñ∂Ô∏è  " vpnservername
##
# Define Function
## Check that sshfs is installed
function occultsshfs_dependencies(){
	if [ -z $(which sshfs) ]; then
		echo -e "\n Installing SSHFS "
        if [ $(uname) = 'Darwin' ]; then
            if [ -z $(which brew) ]; then
                ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
            brew cask install osxfuse
			brew install sshfs
        elif [ $(uname) = 'Linux' ]; then
        	yum install fuse-sshfs
        	[ -z $(which sshfs) ] && echo "Sorry - Linux not currently supported, see your system admin" && exit
        else
        	echo 'Sorry this OS is not supported'
        	exit
        fi		
        [ -z $(which vpn-connect) ] && git clone http://github.com/seldamat/vpn-tools ${HOME}/ && echo -e "#vpn-connected added to path $(date)\nexport PATH=$PATH:${HOME}/vpn-tools" >> "${HOME}/.bash_profile"
	fi
}
## Define Function
# Uninstall sshfs
function occultsshfs_uninstall(){
	if [ ! -z $(which sshfs) ]; then
		echo -e "\n Uninstalling SSHFS "
        if [ $(uname) = 'Darwin' ]; then
            brew cask uninstall osxfuse
			brew uninstall sshfs
        elif [ $(uname) = 'Linux' ]; then
        	yum uninstall fuse-sshfs
        fi		
	fi
	# delete autosshfs files and logs
	[ -d "${HOME}/.ssh/.autosshfs/" ] && rm -vr "${HOME}/.ssh/.autosshfs/"
	# print completion message
	echo -e "\n‚úÖ  Dependencies and files for ${0##*/} have been uninstalled"
	exit
}
# Define Function
## Assemble input arguments to final formats
function occultsshfs_buildcoffin(){
	mount_here=${mount_here}/${hostalias}
	# maybe check write permissions here?
	echo -e "\n‚ö∞    Setting up Local Coffin for Zombie: $mount_here\n" && [ ! -d ${mount_here} ] && mkdir -p ${mount_here}
	[ ! -e "${HOME}/.ssh/.autosshfs" ] && mkdir -p ${HOME}/.ssh/.autosshfs
}
# Define Function
## Establish Persistent VPN Connection via OpenConnect (only works on macOS)
function occultsshfs_checkvpn(){
	vpn-connect
	i=1
	sp="/-\|"
	echo -n ' ' 
	while [ -z "$(echo $(ps aux | grep "[g]uvpn.georgetown.edu"))"]; do
		printf "\b${sp:i++%${#sp}:1} Seeking VPN Connection...\r"
	done
	# give time to log in
	[ ! -z "$(echo $(ps aux | grep "[g]uvpn.georgetown.edu"))"] && echo -e 'üîê  logging into vpn..\n' && sleep 1
}
# Define Function
## Check Existence of SSH Keys, ssh-agent & keychain
function occultsshfs_checksshkeys(){
	echo -e '\nüîé  Searching for SSH keys to activate SSH agent\n'
	# get location of current key
	local currentkey=$(ssh-add -L)
	# use key if exists 
	[ "${currentkey}" ] && echo -e "   üîë  SSH Keys are Currently Active \n"
	## maybe modify setup-sshkeys to be more flexible and do certain tasks with input args?
	## this needs some modification still
	[ -z "${currentkey}" ] || [ -z "$(which keychain)" ] && echo -e "‚ùóÔ∏è‚ùóÔ∏è  No Active Encryption Key, SSH agent or Passphrase Keychain Detected!\n **  Creating Public/Private RSA Key Pairs with 4096 Bit Length, Secure Passphrase & SSH-Agent Management via Keychain\n\n"  && setup-sshkeys -uname $user -host $host --rsa -bits 4096 --x11 --keychain
}
# Define Function
## Check For Existing Host Alias & Fix Naming Conflicts If Found
### ** User can specify a host alias that is identical to an existing alias.. either this alias already exists
###	   (i.e. same origin) OR the user has specified an identical alias name but points to a different origin
### ** This function avoids multiple aliases in the home directory that all point to the same place.. however a user
###    can specify an alias with an existing name that points to a different place
function occultsshfs_checkalias(){
	# Find all symbolic links in homedirectory
	local linklist=$(ssh ${user}@${host} 'ls -d `find '${HOSTHOME}' -maxdepth 1 -type l -print`')
	# Only check links if there are any!
	if [ "${linklist}" ]; then
		# Loop through all symbolic links and identify link origin 
		for link in ${linklist}; do 
			# Retrieve Alias Origin
			identity=$(ssh ${user}@${host} 'echo $(readlink -f '${link}')')			
			# Modify Alias Name IF & ONLY IF Desired File Systems Are Different But Aliases The Same
			if [ "${identity}" != "${mount_this}" ] && [ "${hostalias}" = "$(basename ${link})" ]; then
				keeplooping='startheloop'
				# If The Alias Origin Doesn't Match then Append Incremented Number to Alias Name (to distinguish)
				local counter=0
				# Keep looping until you can find a newhostalias that doesn't exist on the remote server
				while [ $keeplooping ]; do
					local newhostalias=$(printf "${hostalias}_%03d" $counter)
					identity=$(ssh ${user}@${host} 'echo $(readlink -f '${1}/${newhostalias}')')
					[ "$(dirname $mount_this)/$(basename ${mount_this})" != "$(dirname $identity)/$(basename ${identity})" ] && keeplooping=$(ssh ${user}@${host} '[ -h '$newhostalias' ] && echo keeplooping!')
					[ "$(dirname $mount_this)/$(basename ${mount_this})" = "$(dirname $identity)/$(basename ${identity})" ] && keeplooping=''
					let counter=counter+1
				done
				# Notify User
				#echo -e "\n\t\t\t\t‚ö†Ô∏è  Host Alias ${hostalias} already exists on ${host}."
				#echo -e "\n\t * * Unique identifier ${newhostalias} has been appended to distinguish distinct file systems\n"
				# Otherwise leaves things alone if the desired filesystems match between user and alias origin							
			elif [ "${identity}" = "${mount_this}" ]; then
				#echo -e "\n‚úÖ    Link to FileSystem Exists on ${user}@${host}:${link} <--> ${identity}"
				hostalias=$(basename ${link})
				break
			fi
		done
		[ ! -z ${newhostalias} ] && hostalias=${newhostalias}
	fi
}
# Define Function
## Remove Zombification Signal & Anchor 
function occultsshfs_banish(){
	echo -e "\nüëπüí≠  Banishing SSHFS Zombie - Unmounting Remote File System, Deleting Zombie Signal  \n"
	echo -e "${user}@${host}:${mount_this} <-- üí•  --> $(hostname):${mount_here}/${hostalias}"
	# Get Correct Alias
	occultsshfs_checkalias
	# Delete Zombie Signal
	if [ -e ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie ]; then
		rm ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie
	fi
	# Remove Binding/Anchor
	if [ -d $mount_here/${hostalias} ]; then
		[ -e $mount_here/${hostalias}/$(whoami).$(hostname).bindzombie ] && rm -v $mount_here/${hostalias}/$(whoami).$(hostname).bindzombie
		echo ''
		umount -f ${mount_here}/${hostalias} > /dev/null
		sleep 1
		## Call function recursively until unmount succeeds (might need time out to avoid endless loops)
		[ -e $mount_here/$(whoami).$(hostname).bindzombie ] && occultsshfs_banish
	fi
	echo -e "\n‚úÖ    Zombie Signal Has Been Killed =-= $(date)"
	echo "---------------------------------------------------------------------------------------------------------------------"
	exit	
}
# Define Function
## Anchor Desired FileSystem to Home Directory on Remote Host
function occultsshfs_occultritual(){
	# Build a Coffin for the Zombie (create directory for mounting & binding)
	occultsshfs_buildcoffin
	# Establish VPN connection if required
	[ ${vpn} ] && occultsshfs_checkvpn
	# Check for SSH keys
	occultsshfs_checksshkeys
	# Check For Naming Conflicts (Don't Overwrite Links!)
	occultsshfs_checkalias
	# Create Binding in Remote Home Directory
	echo -e "\n‚õì    Binding Remote File System to Local Host  ‚õì"
	local binding="${HOSTHOME}/.ssh/.autosshfs/$(whoami).$(hostname).${hostalias}.bindzombie"
	ssh ${user}@${host} "mkdir -vp ${HOSTHOME}/.ssh/.autosshfs; [ ! -e ${binding} ] && touch ${binding}"
	# Link Remote FileSystem to Remote Home Directory with Anchor Once Host Alias Checks Out
	echo -e "\n\tSoft-Linking Remote File Systems on ${user}@${host} :: ${mount_this} ‚ÜîÔ∏è  ${HOSTHOME}/${hostalias}\n"
	ssh ${user}@${host} "[ ! -e ${HOSTHOME}/${hostalias} ] && ln -s ${mount_this} ${HOSTHOME}/${hostalias}"
}
# Define Function 
## Loop indefinitely while Zombie Signal Exists & Check for Anchor
function occultsshfs_raisezombie(){
	# SSHFS connection
	sshfs ${user}@${host}:${HOSTHOME} $mount_here -o Ciphers=arcfour,cache=yes,kernel_cache,defer_permissions,reconnect,follow_symlinks	
	# Create Anchor/Binding - this is a way of knowing that the directory is readable with remote contents
	touch ${mount_here}/$(whoami).$(hostname).bindzombie && sleep 1
	# Check to see Binding exists in mounted directory
	if [ -e $mount_here/$(whoami).$(hostname).bindzombie ]; then
		echo -e "\n‚úÖ  Succesfully Raised Zombie In ${mount_here}\n‚ñ∂Ô∏è  $(date)"
		# If successful open/print contents
        if [ $(uname) = 'Darwin' ]; then
        	open ${mount_here}/${hostalias}
        elif [ $(uname) = 'Linux' ]; then
        	ls ${mount_here}/${hostalias}
        fi
    else
    	# Repeat function recursively until it succeeds (probably need time out for this)		
    	echo -e "\n‚ö∞üëª  Resurrecting SSHFS Connection =-=  $(date) =-= ($mount_here/$(whoami).$(hostname).bindzombie does not exist)\n"
    	occultsshfs_raisezombie
	fi
}
# Define Function
## Assemble current sequence of functions and execute spell
function occultsshfs_castspell(){
	# Check that sshfs is installed
	occultsshfs_dependencies
	# Get Path to Home Directory for Remote User
	HOSTHOME=$(ssh ${user}@${host} 'echo ${HOME}')
	# Banish Zombie & BindingSpell 
	[ ${banish} ] && occultsshfs_banish
	[ -z "${HOSTHOME}" ] && echo '‚ùóÔ∏è  Could not determine remote home directory path - username/hostname may be incorrect, exiting...' && exit
	# Perform an Occult Ritual To Bind Zombie
	occultsshfs_occultritual
	# Now Raise Zombie
	echo "üôå Behold! Raising Zombie SSHFS Connection :: ${user}@${host}:${mount_this} <--üëª üì° --> $(hostname):${mount_here}/${hostalias}\n"
	## Create signal for loop - don't stop until signal is deleted (via banish)
	touch "${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie"
	## initiate loop
	while [ -e "${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie" ]; do 
		[ ! -e ${mount_here}/$(whoami).$(hostname).bindzombie ] && occultsshfs_raisezombie
	done
}

# Execute top level function 
occultsshfs_castspell > ${HOME}/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie.log 2>&1 & 
echo ''
[ ! -z ${banish} ] && echo -e "\t\t\t\t\t\tüíÄ Zombie Process Has Been Killed"
[ -z ${banish} ] && echo -e "   Running Zombie in Background - you can check status at ~/.ssh/.autosshfs/${user}.${host}.${hostalias}.zombie.log"
echo '---------------------------------------------------------------------------------------------------------------------'
#####################################
### Shady El Damaty ; 3 May 2017
###
### occult-sshfs / occultsshfs
#####################################