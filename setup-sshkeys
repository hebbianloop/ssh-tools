#!/bin/bash
## Generate Public/Private Key Pairs for Keyless Login to Remote Host

client=$(hostname)  # Origin 
user=$(whoami)      # User @ Origin

host=$(hostname)        # Destination
user_alias=$(whoami)    # User Name @ Destination

ssh_home="${HOME}/.ssh"              # Stash ssh deets here
sshagentfile="${HOME}/.ssh_agent"    # Parameters for ssh-agent

keytype='dsa'
x11=''

proceed=''
quiet=''
resetkeys=''
handshake=''
bits=''

# Define Function
## Print Usage Information
function show_help(){
cat <<EOF

Usage ${0##*/} [-h|--help] [-host ADDRESS] [-uname USERNAME] [-sshagent FILE][-sshdir PATH] [-prvkey FILE]
                    [--x11] [--reset] [--2waytunnel]

This program checks for existence of private/public keypairs for passwordless ssh logins between remote and local host.

    REQUIRED ARGUMENTS  
    
        -host       address of remote server to set up logins keys
        -uname      username credential for remote server

    SSH OPTIONS

        -sshagent   file for ssh-agent 
        -keytype    rsa | dsa
        -bits       number of bits to encode key (rsa - 2048, dsa - 1024)
        -sshdir     path to .ssh directory (keys stored here)
        -prvkey     path to private key
        -pubkey     path to public key
        --x11       permit X11 forwarding 

    OTHER FLAGS

        --status        print parameters for ssh setup and exit
        --quiet         run with minimal user_alias input
        --reset         delete sshdir and associated keys (CAUTION :: all host keys are deleted)        
        
        --2waytunnel    create public/private keys on both hosts (bilateral keyless login)  
        


EOF
}
# Parse Options 
## Shift through standard input and assign to variables using option flags
while :; do
    case ${1} in
        -h|--help)
        show_help
        exit
        ;;
        -rsa)
            keytype='rsa'
        ;;
        -dsa)
            keytype='dsa'
        ;;        
        --x11)
            x11='-O permit-x11-forwarding'
        ;;
        --quiet)
            quiet='quiet'
        ;;
        --status)
            proceed='N'
        ;;
        --2waytunnel)
            handshake='2-way'        
        ;;
        --keychain)
            keychain='on'        
        ;;        
        --reset)
            resetkeys='true'
        ;;
        -host)
            if [ -n "${2}" ]; then
                host=${2}
                shift
            else                                                                                                                                                                                                                 
                echo "ERROR: -host requires a non-empty option argument.\n" >&2
                exit
            fi
            ;;
        -uname)
            if [ -n "${2}" ]; then
                user_alias=${2}
                shift
            else
                echo "ERROR: -uname requires a non-empty option argument.\n" >&2
                exit
            fi
            ;;
        -sshagent)
            if [ -n "${2}" ]; then
                sshagentfile=${2}
                shift
            else
                echo "ERROR: -sshagent requires a non-empty option argument.\n" >&2
                exit
            fi
            ;;
        -sshdir)
            if [ -n "${2}" ]; then
                ssh_home=${2}
                shift
            else
                echo "ERROR: -sshdir requires a non-empty option argument.\n" >&2
                exit
            fi
            ;;
        -keytype)
            if [ -n "${2}" ]; then
                keytype=${2}
                shift
            else
                echo "ERROR -keytype requires a non-empty option argument" >&2
                exit
            fi
            ;;
        -bits)
            if [ -n "${2}" ]; then
                bits='-b '$2
                shift
            else
                echo "ERROR -bits requires a non-empty option argument" >&2
                exit
            fi
            ;;                                   
        -prvkey)
            if [ -n "${2}" ]; then
                privkey=${2}
                shift
            else
                echo "ERROR: -prvkey requires a non-empty option argument.\n" >&2
                exit
            fi
            ;;
        -pubkey)
            if [ -n "${2}" ]; then
                pubkey=${2}
                shift
            else
                echo "ERROR -pubkey requires a non-empty option argument" >&2
                exit
            fi
            ;;
        -?*)
            printf '\n ‚ÄºÔ∏è Warning: Unknown option: %s\n' "${1}" >&2
            exit
            ;;
        *)
            break
    esac
    shift
done
# ----------------------------------------------------------------
#                  Build Private and Public Key Names
privkey='id_'${keytype}
pubkey='id_'${keytype}'.pub'
#                 Assign Option String for SSH-KEYGEN
opts="-t ${keytype} ${bits} ${x11} -f ${ssh_home}/${privkey}"
# ----------------------------------------------------------------
# Define Function
## This function displays options to user_alias and asks for verification
function confirm_input(){
local confirm_user_input=$(cat <<-EOF
    \n
    Setting up Keyless SSH Tunnel :: ${user}@${client} üì°  ‚á¢  üîë  ‚á¢ ${user_alias}@${host}
    \n
    \n
    \t    üñ•  HOST\t\t\t          ::      ${host}\n
    \t    üë§  USER ALIAS\t\t      ::      ${user_alias}\n\n
    \t    üìÅ  SSHDIR\t\t          ::      ${ssh_home}\n
    \t    üìù  SSHAGENTFILE\t\t    ::      ${sshagentfile}\n
    \t    üîê  KEYTYPE\t\t         ::      ${keytype}\n\n
    \t    üîë  PRIVATEKEY\t\t      ::      ${privkey}\n
    \t    üóù  PUBLICKEY\t\t       ::      ${pubkey}\n\n    
    \t    ‚öô   KEYGEN OPTIONS\t    ::      ${opts}
EOF
    )   
# Check if user_alias just wants to see status
[ ! ${proceed} ] || [ ! ${quiet} ] && echo -e ${confirm_user_input}
[ ! ${quiet} ] && [ -z ${proceed} ] && read -p "Setup New Handshake? [Y/N]  :: " proceed
echo -e "\n"
[ "${proceed}" = "N" ] || [ "${proceed}" = "n" ] && exit
}
# Define Function
## This function checks for existence of hidden ssh directory in user_alias home and generates a
## public/private key pair and adds the public key to the authorized keys file.
function stdssh_genaddkeys(){
    # Check if ssh home dir exists
	[ ! -d ${ssh_home} ] && mkdir -p ${ssh_home}
    # Generate keys
    ssh-keygen ${opts}
    # Create authorized keys file
    [ ! -e ${ssh_home}/authorized_keys ] && touch ${ssh_home}/authorized_keys
    echo -e "\n ** Adding public key to authorized keys and setting permissions\n"
	cat ${ssh_home}/${pubkey} >> ${ssh_home}/authorized_keys
}
# Define Function
## Check permissions
function stdssh_perms(){
    chmod 600 ${ssh_home}/authorized_keys
    chmod 600 ${ssh_home}/${privkey}
}
# Define Function
## This function takes a remote host, username, and path to a private key and copies it
## to the home directory on the remote host. 
function stdssh_cpkey(){
	local host=${1}
	local username=${2}
	local privkey=${3}
	local rseed=${RANDOM}
    echo -e "\n  üñ•   üì°  ü§ô  üéõ  ü§ò  Securely Transmitting Secret Handshake \n"
    echo -e "Appending $client pubkey to authorized keys on $host"
    cat ${ssh_home}'/'${pubkey} | ssh ${username}'@'${host} '[ ! -d ~/.ssh ] && mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'
    echo -e "Sending $client private key to $host"
	scp ${ssh_home}'/'${privkey} ${username}'@'${host}:'/tmp/'${privkey}'.transfer.'${rseed}
    echo -e "Setting up $client private key on $host"
	ssh ${username}'@'${host} "[ ! -e  ~/.keys ] && mkdir ~/.keys; mv /tmp/${privkey}.transfer.${rseed} ~/.keys/; chmod 400 ~/.keys/${privkey}.transfer.${rseed}"
}
# Define Function
function stdssh_addkeychain(){
    if [ -z $(which keychain) ]; then
        if [ $(uname) = 'Darwin' ]; then
            if [ -z $(which brew) ]; then
                ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
            brew install keychain
        elif [ $(uname) = 'Linux' ]; then
            yum install keychain
        fi
    fi
    echo -e '\n\n## start keychain\neval `keychain --agents ssh --eval '${privkey}'`\n\n' >> ${HOME}/.bash_profile
}
# Define Function
## Setup and add private key to agent
function stdssh_addagent(){
	local privkey=${1}
    if [ -z ${keychain} ]; then
        eval `ssh-agent -s`
        # Mac OS X specific params
        if [[ $(uname) = 'Darwin' ]]; then
            if [[ $(uname -r) = '16.5.'* ]]; then # make config file for Sierra
                echo -e "\nHost *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ${ssh_home}/${privkey}\n" >> ${ssh_home}/config
            fi
        fi
        # Add private key
        ssh-add -K ${ssh_home}/${privkey}
        # Start SSH-AGENT at log in and log out
        echo -e '\n## start ssh agent at login\n[ -z "$SSH_AUTH_SOCK" ] && eval `ssh-agent -s` && ssh-add '${ssh_home}'/'${privkey}'\n\n' >> ${HOME}/.bash_profile
        echo -e '\n## quit ssh-agent at logout\n[ -n "$SSH_AUTH_SOCK" ] && eval `ssh-agent -k`\n\n' >> ${HOME}/.bash_logout 
    else
        stdssh_addkeychain
    fi
}
# Define Function
## Reset
function stdssh_reset(){
    ## Reset?
    if [ ${resetkeys} ]; then
        echo -e '\n'
        read -p "Are you sure you want to delete all ssh-agent files, .bash_logout and .ssh directory?  [Y/N]  :: " doublecheck
        if [ "${doublecheck}" = 'Y' ] || [ "${doublecheck}" = 'y' ]; then
            echo -e "\n\n üî•üóë  Removing All Local Keys, Authorized Hosts & ssh-agent Settings"
            rm -v ${ssh_home}/${privkey}
            rm -v ${ssh_home}/${pubkey}
            rm -v ${ssh_home}/config
            rm -v ${sshagentfile}
            rm -v ${HOME}/.bash_logout
            #echo -e "\n\n üì° ‚ö°Ô∏è ‚ö°Ô∏è  Removing All Remote Keys, Authorized Hosts & ssh-agent Settings"
            #ssh ${user_alias}@${host} "rm -rv ~/.keys;"
        fi
    fi
}
# Define Function
## Run STDSSH for a 1-way handshake
function stdssh_run(){
    local host=${1}
    local username=${2}
    local privkey=${3}
    # Check for Reset
    stdssh_reset
    ## Run only if User confirms input arguments 
    confirm_input
    ## Generate Keys
    stdssh_genaddkeys
    ## Copy Keys to Host
    stdssh_cpkey ${host} ${username} ${privkey}
    ## Add Agent to Read Passphrase
    stdssh_addagent ${privkey}
    ## Set Appropriate Permissions
    stdssh_perms
}

function stdssh(){
    stdssh_run $host $user_alias $privkey
}

# Run STDSSH
'stdssh'

#####################################
### Shady El Damaty ; 24 April 2017
###
### stdssh / setup-sshkeys
#####################################