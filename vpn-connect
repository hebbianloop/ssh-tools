#!/bin/bash
##
vpnservername=''
reset=''
stop=''
instal=''
verbose=''
##
# Define Function
## Help
show_help(){
cat <<EOF

Usage :: ${0##*/} [to SERVERNAME] [reset] [stop] [info] [install] [help]

  Initiate an openconnect instance to perform passwordless login to a VPN server. Open connect will
  attempt automatic reconnection if the connection is dropped at any point.

Notes :: 

* This program will install openconnect and its dependencies if they do not exist. 

* The TUNTAP utility is required for functionality on OS X. Please see installation instructions for
  adding openconnect to the sudoers list to avoid connection hangups due to pending password prompts.

** Compatible with macOS Sierra only.


‚öô   INSTALLATION CAVEATS - openconnect requires manual intervention to finish the installation

   Please complete the following steps before running this command again :: 

  ‚ùó  Ô∏è Running openconnect requires sudo because it can affect DNS resolution. You must add this program
      to the sudoers list to avoid typing your password in each time you want to connect.

	* To enable passwordless reconnection, type the following into your terminal:

		>> sudo visudo -f /etc/sudoers

	* A text editor will appear and you must scroll with the down arrow until you see the following

		## 
		## User privilege specification
		## 
		root ALL=(ALL) ALL
		%admin ALL=(ALL) ALL

	* Copy/Paste the following line right under the last line in the section above

	 	%admin  ALL=(ALL) NOPASSWD: /usr/local/bin/openconnect

  ‚úÖ   Now you may establish a persistent vpn connection by typing

      >> vpn-connect to <nameofvpn>

EOF
}
# Parse Options 
## Shift through standard input and assign to variables using option flags
while :; do
    case ${1} in
        'help')
        	show_help
        	exit
        	;;
        'reset')
        	reset='reset'
        	;;
        'stop')
        	stop='stop'
        	;;
        'info')
	       showinfo='showlogs'
	    	if [ -n "${2}" ]; then
		   		vpnservername=${2}
            	shift
        	else
            	echo "ERROR - please specify server name you would like to get information on" >&2
            	exit
        	fi			
	        ;;
		'install')
	        instal='install'
			;;
		'uninstall')
	        uninstall='install'
			;;		
        'to')
			if [ -n "${2}" ]; then
            	    vpnservername=${2}
                    shift
			else
                    echo "ERROR - please specify server name you would like to connect to" >&2
                    exit
			fi
			;;
        ?*)
            printf '\n ‚ÄºÔ∏è Warning: Unknown option: %s\n' "${1}" >&2
            exit
            ;;
        *)
            break
    esac
    shift
done
# Define Function
## Prompt User for Password
function checkvpn_credentials_prompt(){
	local useraction=$(echo "display dialog \"  üë§  Enter User Name for ${vpnservername}.\" default answer \"$(whoami)\" buttons {\"Never Mind\",\"Continue\"} default button \"Continue\"" | osascript)
	local continu=$(echo ${useraction} | grep -o "button returned:.*," | cut -f2- -d: | tr -d ,)
	echo "User Action: $continu"
	[ "${continu}" = "Never Mind" ] && exit
	[ "${continu}" = "Continue" ] && user=$(echo ${useraction} | sed -n -e 's/^.*text returned://p')
	local useraction=$(echo "display dialog \"  üóù  Enter Password for ${vpnservername}.\" default answer \"\" buttons {\"Never Mind\",\"Continue\"} default button \"Continue\" with hidden answer" | osascript)	
	local continu=$(echo ${useraction} | grep -o "button returned:.*," | cut -f2- -d: | tr -d ,)
	echo "User Action: $continu"
	[ "${continu}" = "Never Mind" ] && exit
	[ "${continu}" = "Continue" ] && password=$(echo ${useraction} | sed -n -e 's/^.*text returned://p')
}
# Define Function
## Prompt User for Password
function checkvpn_secretkey_prompt(){
	local useraction=$(echo "display dialog \"  üîë  Enter Encryption Key for ${vpnservername}.\" default answer \"\" buttons {\"Never Mind\",\"Continue\"} default button \"Continue\" with hidden answer" | osascript)
	local continu=$(echo ${useraction} | grep -o "button returned:.*," | cut -f2- -d: | tr -d ,)
	echo "User Action: $continu"
	[ "${continu}" = "Continue" ] && secretkey=$(echo ${useraction} | sed -n -e 's/^.*text returned://p')
	[ "${continu}" = "Never Mind" ] && exit
}
# Define Function
## Prompt User for VPN Address
function checkvpn_vpnaddress_prompt(){
	local useraction=$(echo "display dialog \"  Enter VPN address üì° \" default answer \"guvpn.georgetown.edu\" buttons {\"Quit\",\"Continue\"} default button \"Continue\"" | osascript)
	local continu=$(echo ${useraction} | grep -o "button returned:.*," | cut -f2- -d: | tr -d ,)
	echo "User Action: $continu"
	[ "${continu}" = "Continue" ] && vpnservername=$(echo ${useraction} | sed -n -e 's/^.*text returned://p')
	[ "${continu}" = "Quit" ] && exit
	echo -e "\nUser Input: $vpnservername\n"
}
# Define Function
## Prompt User for Password
function checkvpn_sudo_prompt(){
	local useraction=$(echo "display dialog \" Please Enter the Admnistrator Password for $(whoami)@$(hostname).\" default answer \"\" buttons {\"Never Mind\",\"Continue\"} default button \"Continue\" with hidden answer" with icon caution | osascript)
	local continu=$(echo ${useraction} | grep -o "button returned:.*," | cut -f2- -d: | tr -d ,)
	echo "User Action: $continu"
	[ "${continu}" = "Never Mind" ] && exit
	[ "${continu}" = "Continue" ] && sudopw=$(echo ${useraction} | sed -n -e 's/^.*text returned://p')
}
# Define Function
## Securely store VPN password
# Path to log in information
function checkvpn_password(){
	local logindir="${HOME}/.ssh/.autovpn"
	echo -e "\nChecking Credentials :: $logindir/.connect.$vpnservername\n"
	# Create login directory and set appropriate permissions
	[ ! -d ${logindir} ] && echo -e "\n\n üõ† Setting up Environment for Automatic VPN Logins..\n" && mkdir -m 700 $logindir && sudo chown $(whoami) $logindir
	# Create Password file if it doesn't exist
	if [ ! -e "$logindir/.connect.$vpnservername" ]; then
		local secret="${logindir}/.connect.$vpnservername"
		#read -p " üë§ VPN Login Required! Please enter your username:   " user && read -sp "  ** Please enter your password:  üîë  " password && echo ''
		local useraction=$(terminal-notifier -sound "Frog" -message "${vpnservername}" -title "üë§ VPN Login Required!" -group 'vpn-connect-autoprompt' -actions "Enter Credentials" -closeLabel "Never Mind" 2>&1)
		local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
		echo "User Action: $useraction"
		[ "${useraction}" = "Enter Credentials" ] && checkvpn_credentials_prompt
		[ "${useraction}" = "Never Mind" ] && exit
		echo -e "\n Please Enter the Admnistrator Password for $(whoami)@$(hostname) Followed by An Encryption PassPhrase. \n Write this Down to Keep Password Safe!" 
		[ -z ${sudopw} ] && checkvpn_sudo_prompt
		checkvpn_secretkey_prompt && echo "${user}:${password}" | openssl enc -aes-256-cbc -k "${secretkey}" > "${secret}" && echo "${sudopw}" | sudo -S chmod 400 "${secret}"
	else
		echo -e " \n  -------------------------------------------\n   üîì  Decrypting Credentials for Auto Login\n  -------------------------------------------\n"
		local secret="${logindir}/.connect.$vpnservername"
		echo -e "\n Enter The De-encryption PassPhrase to Retrieve VPN Username\n"
		# notification
		local useraction=$(terminal-notifier -sound "Submarine" -message "Enter the encryption key" -title "vpn-connect" -subtitle "${vpnservername}" -group 'vpn-connect-autoprompt' -actions "Enter Key" -closeLabel "Never Mind" 2>&1)
		local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
		echo "User Action: $useraction"
		[ "${useraction}" = "Enter Key" ] && checkvpn_secretkey_prompt
		[ "${useraction}" = "Never Mind" ] && exit
		## decode password with passphrase
		user=$(openssl enc -aes-256-cbc -in ${secret} -k ${secretkey} -d | cut -f1 -d:)
		#echo -e "\n Enter The De-encryption PassPhrase to Retrieve VPN Password"
		password=$(openssl enc -aes-256-cbc -in ${secret} -k ${secretkey} -d | cut -f2- -d:)
	fi	
}
# Define Function
## Check for any missing software, ask user if he would like to install.. otherwise exit
function checkvpn_dependencies(){
	[ -z $(which openconnect) ] || [ ! -e /Library/Extensions/tap.kext ] || [ ! -e /Library/Extensions/tun.kext ] || [ ! -e /Library/LaunchDaemons/net.sf.tuntaposx.tap.plist ] && echo -e "Missing Dependencies! Installation is Not Complete! Would you like to install vpn-connect? (y|n)" && read prompt
	[ "${prompt}" = 'Y'] || [ "${prompt}" = 'y'] && instal='install'
	[ "${prompt}" != 'y' ] || [ "${prompt}" != 'Y'] && exit
}
# Define function
## Install Open Connect
function checkvpn_install(){
	echo -e "\n üì¶  üõ†  Checking Required Dependencies & Setting Up Shop for VPN-CONNECT\n"
	## Exit if Not OS X
	[ ! $(uname) = "Darwin" ] && echo -e "\nÔ∏è‚ùóÔ∏è  Support is limited to macOS Darwin at this time.. quitting\n" && exit 0
	# Install HomeBrew to download everything!
	[ -z $(which brew) ] && echo -e "\n üç∫  Installing Homebrew - Package Manager for OS X (see more info here: https://brew.sh/)\n" && ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	# Install wget if it doesn't exist
	[ -z $(which wget) ] && echo -e "\n üì°  Installing Binary Program 'wget' - Command for Downloading Files from the Internet\n" && brew install wget
	# Download & Install TunTap	
	[ ! -e /Library/Extensions/tap.kext ] || [ ! -e /Library/Extensions/tun.kext ] || [ ! -e /Library/LaunchDaemons/net.sf.tuntaposx.tap.plist ] && echo -e "\n\n ‚öôÔ∏è  Installing TunTap Kernel Extension for OpenConnect Configuration\n\n" && wget https://downloads.sourceforge.net/project/tuntaposx/tuntap/20150118/tuntap_20150118.tar.gz && mkdir -p ${HOME}/tuntap && tar -xzvf tuntap_20150118.tar.gz -C ${HOME}/tuntap && echo -e " **\n\nPlease install the TUNTAP Driver in the pop up window\n" && open ${HOME}/tuntap/tuntap_20150118.pkg && rm -v tuntap_20150118.tar.gz
	# Get Authenticated Certificate from Apple
	[ ! -d ${HOME}/.ssh ] && echo -e "\nCreating directory for Secure Shell Configruation :: ${HOME}/.ssh\n" && mkdir "${HOME}/.ssh"
	[ ! -f ${HOME}/.ssh/apple_root_ca.pem ] && echo -e "\n\n üîñ  Fetching Apple Root Certificate.. --> ${HOME}/.ssh/apple_root_ca.pem\n\n" && [ ! -d ${HOME}./ssh ] && wget https://www.apple.com/certificateauthority/AppleRootCA-G2.cer -O ${HOME}/.ssh/apple_root_ca.pem
	# Install Open Connect With HomeBrew
	[ -z $(which openconnect) ] && echo -e "\n üîß  Downloading & Installing OpenConnect Program - VPN Utility for Networks Configured Via Cisco Systems\n" && brew install openconnect
	# Install base dependencies for os x notifications
	if [ -z $(which terminal-notifier) ]; then
		brew install terminal-notifier
		local useraction=$(echo "display dialog \"Please change the notification alert style for terminal-notifer to "Alerts"\" buttons {\"Quit\",\"Continue\"} default button \"Continue\" with icon caution" | osascript)
		echo "User Action: $useraction"
		local continu=$(echo ${useraction} | grep -o "button returned:.*" | cut -f2- -d:)
		echo "User Action : ${continu}"
		[ "${continu}" = "Quit" ] && brew uninstall terminal-notifier && exit
		[ "${continu}" = "Continue" ] && open "x-apple.systempreferences:com.apple.preference.notifications"
	fi
	# Get User Input for Next Step
	#local useraction=$(terminal-notifier -message "try './vpn-connect to <serveraddress>'" -title "‚úÖ vpn-connect is ready to use" -sound "Submarine" -group 'vpn-connect-autoprompt' -timeout 10 2>&1)
}
# Define Function
## Uninstall Dependencies
function checkvpn_uninstall(){
	[ -e /Library/Extensions/tap.kext ] || [ -e /Library/Extensions/tun.kext ] || [ -e /Library/LaunchDaemons/net.sf.tuntaposx.tap.plist ]  && sudo rm -v /Library/LaunchDaemons/net.sf.tuntaposx.tap.plist && sudo rm -rv /Library/Extensions/tun.kext /Library/Extensions/tap.kext ${HOME}/tuntap
	[ -e ${HOME}/.ssh/apple_root_ca.pem ] && rm -v ${HOME}/.ssh/apple_root_ca.pem
	[ $(which openconnect) ] && brew uninstall openconnect
	exit
}
# Define Function
## reset all account information
function checkvpn_reset(){
	echo -e "\n Reseting Environment for Automatic VPN Logins\n"
	sudo rm -r "${HOME}/.ssh/.autovpn"
	local useraction=$(terminal-notifier -sound "Pop"  -message "vpn credentials have been reset" -title "${vpnservername}"  -group 'vpn-connect-autoprompt' -actions "Reconnect" -closeLabel "Sounds Good" 2>&1)
	local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
	echo "User Action: $useraction"
	[ "${useraction}" = "Reconnect" ] && checkvpn_connect	
	exit
}
# Define Function 
## Connect 
function checkvpn_connect(){
	checkvpn_password
	echo -e "\n   üì°  Seeking Initial Connection to ${vpnservername}\n\n"
	local root_certificate=${HOME}/.ssh/apple_root_ca.pem
	[ ! -e ${root_certificate} ] && read -p "ERROR, cannot find root certificate: ${root_certificate}. Please enter path to root certificate file." root_certificate && [ ! -e $root_certificate ] && echo -e "Root Certificate Not Found: Exiting.. refer to https://gist.github.com/moklett/3170636 for more info" && exit 1
	[ -z ${sudopw} ] && checkvpn_sudo_prompt && echo "${sudopw}" | sudo -S whoami
	echo ${password} | sudo openconnect --user=$user --usergroup='Default' --cafile=${root_certificate} --reconnect-timeout 1 --passwd-on-stdin ${vpnservername} > "${HOME}/.ssh/.autovpn/connect.$vpnservername.log" 2>&1 &
	sleep 10
	checkvpn_info
	#[ ! -z "${checkconnected}" ] && echo -e ' üìª  Connection Established \n\t - type "./vpn-connect info <servername>" to get information about connection\n\t - type "./vpn-connect stop" to kill vpn session\n'
	#[ -z "${checkconnected}" ] && echo -e ' ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è Connection Failed ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è\nPassword & Username may be incorrect... type "./vpn-connect reset" to re-enter username & password'
	#echo $checkconnected && echo ''
}
# Define Function
## Stop Connection
function checkvpn_stop(){
	echo -e '\nDisconnecting from $vpnservername\n'
	[ -z ${sudopw} ] && checkvpn_sudo_prompt && echo ${sudopw} | sudo -S pkill openconnect
	local useraction=$(terminal-notifier -sound "Sosumi"  -message "disconnected from vpn" -title "${vpnservername}"  -group 'vpn-connect-autoprompt' -actions "Reconnect","Main Menu" -closeLabel "Sounds Good" -dropdownLabel "Show Options" 2>&1)
	local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
	echo "User Action: $useraction"
	[ "${useraction}" = "Reconnect" ] && checkvpn_connect
}
# Define Function
## Print Log for Connection
function checkvpn_info(){
	defaultlog="${HOME}/.ssh/.autovpn/connect.$vpnservername.log"
	local checkrunning=$(echo $(ps aux | grep "[g]uvpn.georgetown.edu"))
	echo -e "\nChecking if Running : $checkrunning\n"
	[ -f ${defaultlog} ] && echo -e "Printing Log :: \n" && cat ${defaultlog}
	# Notify User of issues
	[ ! -f ${defaultlog} ] && echo -e "\n VPN Log Not Found -- try reconnecting with ./vpn-connect to <serveraddress>\n" && local useraction=$(terminal-notifier -sound "Sosumi" -message "Error no network history (try resetting)" -title "vpn-connect" -subtitle "${vpnservername}" -group 'vpn-connect-autoprompt' -actions "Reset" -closeLabel "Never Mind" 2>&1)
	[ -z "${checkrunning}" ] && echo -e ' ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è Openconnect Has Exited ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è  ‚ùóÔ∏è\n' && useraction=$(terminal-notifier -sound "Sosumi" -message "‚ùóConnection Failed (try reconnecting/resetting)" -title "vpn-connect" -subtitle "${vpnservername}" -group 'vpn-connect-autoprompt' -actions "Reset","Reconnect","Main Menu" -closeLabel "Never Mind" -dropdownLabel "Show Options" 2>&1)
	[ "${checkrunning}" ] && local useraction=$(terminal-notifier -sound "Submarine" -message "$(cat $defaultlog | grep -o "Connected as .*")" -title "vpn-connect" -subtitle "${vpnservername}" -group 'vpn-connect-autoprompt' -actions "Disconnect","Reset","Main Menu" -closeLabel "Exit" -dropdownLabel "Show Options" 2>&1)
	# Parse response
	local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
	echo "User Action: $useraction"
	[ "${useraction}" = "Reconnect" ] && checkvpn_connect
	[ "${useraction}" = "Disconnect" ] && checkvpn_stop
	[ "${useraction}" = "Reset" ] && checkvpn_reset
	[ "${useraction}" = "Main Menu" ] && checkvpn_mainmenu
	[ "${useraction}" = "Never Mind" ] || [ "${useraction}" = "Sounds Good" ] || [ "${useraction}" = "Exit" ] && exit
}
## Process any command line inputs before running main menu
# print info and quit
[ ! -z ${showinfo} ] && checkvpn_info
# kill process if stop signal
[ ! -z ${stop} ] && checkvpn_stop
# delete all locally stored meta data
[ ! -z ${reset} ] && checkvpn_reset
# check if user signals uninstall script
[ ! -z ${uninstall} ] && checkvpn_uninstall
# check password and connect if no stop signal
#[ -z ${stop} ] && [ -z ${showinfo} ] && checkvpn_install && checkvpn_connect
##
# Define Function
## Run this first and figure out what user wants
function checkvpn_mainmenu(){
	# Check to make sure everything is installed first!
	checkvpn_install
	local useraction=$(terminal-notifier -message "select desired option" -title "vpn-connect" -subtitle "üö© Main Menu" -sound "Submarine" -group 'vpn-connect-autoprompt' -actions "Connect","Get Info","Disconnect","Reset","Uninstall" -closeLabel "Quit" -dropdownLabel "Show Options" 2>&1)
	local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p')
	echo -e "\nMain Menu User Selection: $useraction\n"
	[ "${useraction}" = "CONTENTCLICKED" ] && local useraction=$(terminal-notifier -message "select desired option" -title "vpn-connect" -subtitle "üö© Main Menu" -sound "Submarine" -group 'vpn-connect-autoprompt' -actions "Connect","Get Info","Disconnect","Reset","Uninstall" -closeLabel "Quit" -dropdownLabel "Show Options" 2>&1) && 	local useraction=$(echo ${useraction} | sed -n -e 's/^.*@//p') && 	echo -e "\nMain Menu User Selection: $useraction\n"
	# Quit if Done 	
	[ "${useraction}" = "Quit" ] && exit	
	# Make sure servername is specified
	[ -z "${vpnservername}" ] && checkvpn_vpnaddress_prompt
	# Parse Main Menu Options
	[ "${useraction}" = "Connect" ] && checkvpn_connect
	[ "${useraction}" = "Get Info" ] && checkvpn_info
	[ "${useraction}" = "Disconnect" ] && checkvpn_stop
	[ "${useraction}" = "Reset" ] && checkvpn_reset
	[ "${useraction}" = "Uninstall" ] && checkvpn_uninstall
}
##
## Run check-vpn pipeline
# always check if openconnect & requirments are installed
checkvpn_mainmenu

### use this to keep connection active..
##while [ 1 ] ; do ping -c 2 10.11.12.13 ; sleep 60 ; done

#####################################
### Shady El Damaty ; 27 April 2017
###
### checkvpn / check-vpn
#####################################